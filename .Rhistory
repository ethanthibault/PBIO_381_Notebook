10 - 3
10 * 3
10 / 3
10^3
log(10)
log10(10)
10 %% 3
10 %/% 3
q <- seq_len(100)
q[q%%9==0]
setwd("~/Documents/UVM_2018/FirstProject")
setwd("~/Documents/UVM_2018/PBIO381/PBIO_381_Notebook")
library(DESeq2)
library("DESeq2")
library("ggplot2")
countsTable <- read.delim("allcountsdataRN_noIT.txt", header=TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_noIT.txt", header=TRUE, stringsAsFactors =  TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~devstage + sex + population)
dim(dds)
dds <- dds[rowSums(counts(dds)) > 1,]
dim(dds)
dds <- dds[rowSums(counts(dds)) >= 1,]
dim(dds)
dds <- dds[rowSums(counts(dds)) > 48,]
dim(dds)
dds <- dds[rowSums(counts(dds)) > 1,]
dim(dds)
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~devstage + sex + population)
dim(dds)
dds <- dds[rowSums(counts(dds)) > 1,]
dim(dds)
dds <- DESeq(dds, modelMatrixType = "standard")
resultsNames(dds)
res <- results(dds)
res <- res[order(res$padj),]
head(res)
str(res)
res <- res[order(res$padj),]
head(res)
summary(res)
testData <- runif(1000)
library(ggplot2)
qplot(x=testData)
testData <- runif(1000)
qplot(x=testData)
source('~/Documents/UVM_2018/FirstProject/ProbabilityDistributions.R', echo=TRUE)
testData <- runif(1000)
qplot(x=testData)
testData <- runif(1000)
qplot(x=testData)
Histo <- function(xData=runif(1000), fColor="purple4")
#custom function for qplot because we don't like the default of qplot and we don't want to type all this in every time.
Histo <- function(xData=runif(1000), fColor="purple4") {z <- qplot(x=xData,color=I("black"),fill=I(fColor),xlab="X",boundary=0)
print(quantile(xData,probs=c(0.025,0.975)))}
print(Histo)
#custom function for qplot because we don't like the default of qplot and we don't want to type all this in every time.
Histo <- function(xData=runif(1000), fColor="purple4") {z <- qplot(x=xData,color=I("black"),fill=I(fColor),xlab="X",boundary=0)
print(z)
print(summary(xData))
print(quantile(xData,probs=c(0.025,0.975)))}
# test function now
Histo()
#custom function for qplot because we don't like the default of qplot and we don't want to type all this in every time.
Histo <- function(xData=runif(1000), fColor="purple3") {z <- qplot(x=xData,color=I("black"),fill=I(fColor),xlab="X",boundary=0)
print(z)
print(summary(xData))
print(quantile(xData,probs=c(0.025,0.975)))}
# test function now
Histo()
#custom function for qplot because we don't like the default of qplot and we don't want to type all this in every time.
Histo <- function(xData=runif(1000), fColor="purple4") {z <- qplot(x=xData,color=I("black"),fill=I(fColor),xlab="X",boundary=0)
print(z)
print(summary(xData))
print(quantile(xData,probs=c(0.025,0.975)))}
# test function now
Histo()
#custom function for qplot because we don't like the default of qplot and we don't want to type all this in every time.
Histo <- function(xData=runif(1000), fColor="purple3") {z <- qplot(x=xData,color=I("black"),fill=I(fColor),xlab="X",boundary=0)
print(z)
print(summary(xData))
print(quantile(xData,probs=c(0.025,0.975)))}
# test function now
Histo()
temp <- rnorm(100)
Histo(xData=temp)
#custom function for qplot because we don't like the default of qplot and we don't want to type all this in every time.
Histo <- function(xData=runif(1000), fColor="tan") {z <- qplot(x=xData,color=I("black"),fill=I(fColor),xlab="X",boundary=0)
print(z)
print(summary(xData))
print(quantile(xData,probs=c(0.025,0.975)))}
# test function now
Histo()
temp <- rnorm(100)
Histo(xData=temp)
Histo(xData=temp, fColor="purple3")
Histo()
print(quantile(xData,probs=c(0.025,0.975)))}
iHisto <- function(xData=runif(1000), fColor="tan") {z <- qplot(x=factor(xData),color=I("black"),fill=I(fColor),xlab="X",boundary=0)
print(z)
print(summary(xData))
print(quantile(xData,probs=c(0.025,0.975)))}
temp2 <- rpois(n=1000,lambda=1.1)
Histo(temp2)
temp2 <- rpois(n=1000,lambda=10.1)
Histo(temp2)
iHisto(temp2)
iHisto(xData=temp2,fColor="purple3")
temp2 <- rpois(n=1000,lambda=0.5)
iHisto(xData=temp2,fColor="purple3")
mean(temp2==0)
x <- rbinom(n=1000,size=40,p=0.75)
iHisto(xData=x,fColor="purple3")
setwd("~/Documents/Keller_Lab/Chilling_Exp")
data <- read.csv("Data.csv")
data
library(ggplot2)
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point()
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous()
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous(0,40)
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous(c(0,40))
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous(limits=c(0,40))
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous() + ylim(0,40)
setwd("~/Documents/Keller_Lab/Chilling_Exp")
data <- read.csv("Data.csv")
data
library(ggplot2)
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous() + ylim(0,40)
setwd("~/Documents/Keller_Lab/Chilling_Exp")
data <- read.csv("Data.csv")
data
library(ggplot2)
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous() + ylim(0,40)
setwd("~/Documents/Keller_Lab/Chilling_Exp")
data <- read.csv("Data.csv")
data
library(ggplot2)
ggplot(data=data, aes(x=Treatment, y=Days, group=Sample)) +
geom_line(aes(color=Sample)) +
geom_point() + scale_x_continuous() + ylim(0,40)
source('~/Documents/UVM_2018/FirstProject/ProbabilityDistributions.R', echo=TRUE)
x <- rbinom(n=1000,size=500,p=0.75)
iHisto(xData=x,fColor="purple3")
# Poisson
# Constant rate process
z <- rpois(n=1000, lambda=1)
iHisto(z)
mean(z==0)
# negative binomail
# range from 0 to infinity
# n = number of replicates
# size is the number of trials
# prob = probability of success with one trial
z <- rnbinom(n=1000, size=2,p=0.5)
iHisto(z)
# alternatively call with mu=mean rate
# size = index of "overdispersion"
# small size =  high dispersion
z <- rnbinom(n=1000,mu=1.1,size=.7)
iHisto(z)
z <- rnbinom(n=1000,size=1,p=0.05)
iHisto(z)
z <- rnbinom(n=1000,size=1,p=0.95)
iHisto(z)
# multinomial distribution
# "balls in urns"
z <- rmultinom(n=1,size=20,prob=c(0.2,0.7,0.1))
z
# multinomial distribution
# "balls in urns"
z <- rmultinom(n=5,size=20,prob=c(0.2,0.7,0.1))
z
# multinomial distribution
# "balls in urns"
z <- rmultinom(n=1000,size=20,prob=c(0.2,0.7,0.1))
rowSums(z)
rowMeans(z)
z <- sample(x=LETTERS[1:3],size=20,prob=c(0.2,0.7,0.1),replace=TRUE)
z
table(z)
# uniform
z <- runif(n=1000, min=3, max=10.2)
Histo(z)
# normal distribution
z <- rnorm(n=1000,mean=2.2,sd=6)
Histo(z)
z <- rgamma(n=1000,shape=1,scale=10)
Histo(z)
z <- rgamma(n=1000,shape=10,scale=10)
Histo(z)
z <- rgamma(n=1000,shape=0.1,scale=0.1)
Histo(z)
z <- rbeta(n=1000,shape1=1,shape2=1)
Histo(z)
z <- rbeta(n=1000,shape1=2,shape2=1)
Histo(z)
z <- rbeta(n=1000,shape1=2,shape2=2)
Histo(z)
z <- rbeta(n=1000,shape1=11,shape2=11)
Histo(z)
z <- rbeta(n=1000,shape1=100,shape2=10)
Histo(z)
z <- rbeta(n=1000,shape1=0.1,shape2=1)
Histo(z)
z <- rbeta(n=1000,shape1=0.1,shape2=0.3)
Histo(z)
# maximum likelihood estimation in R
x <- rnorm(n=1000,mean=92.5,sd=2.5)
Histo(x)
library(MASS)
x <- rnorm(n=1000,mean=92.5,sd=2.5)
Histo(x)
zFit <- fitdistr(x,"normal")
str(zFit)
zFit$estimate
# now fit to a gamma
zFit <- fitdistr(x,"gamma")
zFit$estimate
zNew <- rgamma(n=1000,shape=1443,rate=15.6)
Histo(zNew)
summary(x)
z <- runif(n=1000,min=82,max=100)
Histo(z)
source('~/Documents/UVM_2018/PBIO381/PBIO_381_Notebook/DESeq2.R', echo=TRUE)
ggplot(data,aes(PC1,PC2,color=population,shape=devstage)) +
geom_point(size=4,alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
sampleDists <- dist(t(assay(vsd)))
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$population, vsd$devstage, vsd$sex, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9,"Purples")))(255) # 255 delimits the number of bins in the scale
colors <- colorRampPalette(c("Purple", "Green"))(255)
library("pheatmap")
pheatmap(sampleDistMatrix,clustering_distance_rows = sampleDists,clustering_distance_cols = sampleDists, col=colors)
d <- plotCounts(dds, gene="OTAU017482-RA", intgroup= (c("population","sex","devstage")), returnData=TRUE)
d
p <- ggplot(d, aes(x=devstage, y=count, shape=sex, colour = population)) +
theme_minimal() + theme(text=element_text(size=20), panel.grid.major = element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("L3L","PP1","PD1","AD4"))
p
write.csv(res_pop, file="DGE_NCvsWA_pop_classDay6.csv", row.names=TRUE, quote=FALSE)
neglogpval <- as.matrix(-log(res_pop$pvalue))
head(neglogpval)
-log(8.561964e-16) # checking first value
res_pop_negpval <- cbind(row.names(res_pop),neglogpval)
head(res_pop_negpval)
colnames(res_pop_negpval)=c("gene","neglogpval")
write.csv(res_pop_negpval, file="DGE_NCvsWA_pop_neglogpval_classDay6.csv", row.names=FALSE,quote=FALSE,col.names=TRUE)
pdf(file="PCA_sex_by_stage.pdf",height=5.5,width=5.5)
ggplot(data,aes(PC1,PC2,color=sex,shape=devstage)) +
geom_point(size=4,alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
dev.off()
ggplot(data,aes(PC1,PC2,color=population,shape=devstage)) +
geom_point(size=4,alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
vsd <- vst(dds,blind=FALSE)
data <- plotPCA(vsd,intgroup=c("population","devstage","sex"), returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
data$devstage <- factor(data$devstage, levels=c("L3L","PP1","PD1","AD4"), labels = c("L3L","PP1","PD1","AD4"))
pdf(file="PCA_sex_by_stage.pdf",height=5.5,width=5.5)
ggplot(data,aes(PC1,PC2,color=sex,shape=devstage)) +
geom_point(size=4,alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
dev.off()
ggplot(data,aes(PC1,PC2,color=population,shape=devstage)) +
geom_point(size=4,alpha=0.85) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
theme_minimal()
sampleDists <- dist(t(assay(vsd)))
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$population, vsd$devstage, vsd$sex, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9,"Purples")))(255) # 255 delimits the number of bins in the scale
colors <- colorRampPalette(c("Purple", "Green"))(255)
library("pheatmap")
pheatmap(sampleDistMatrix,clustering_distance_rows = sampleDists,clustering_distance_cols = sampleDists, col=colors)
d <- plotCounts(dds, gene="OTAU017482-RA", intgroup= (c("population","sex","devstage")), returnData=TRUE)
d
p <- ggplot(d, aes(x=devstage, y=count, shape=sex, colour = population)) +
theme_minimal() + theme(text=element_text(size=20), panel.grid.major = element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.3,h=0), size=3) +
scale_x_discrete(limits=c("L3L","PP1","PD1","AD4"))
p
write.csv(res_pop, file="DGE_NCvsWA_pop_classDay6.csv", row.names=TRUE, quote=FALSE)
neglogpval <- as.matrix(-log(res_pop$pvalue))
head(neglogpval)
-log(8.561964e-16) # checking first value
res_pop_negpval <- cbind(row.names(res_pop),neglogpval)
head(res_pop_negpval)
colnames(res_pop_negpval)=c("gene","neglogpval")
write.csv(res_pop_negpval, file="DGE_NCvsWA_pop_neglogpval_classDay6.csv", row.names=FALSE,quote=FALSE,col.names=TRUE)
colData$group <- factor(paste0(colData$populations,"-",colData$devstage,"-",colData$sex))
head(colData)
colData$group <- factor(paste0(colData$population,"-",colData$devstage,"-",colData$sex))
head(colData)
dds <- DESeqDataSetFromMatrix(countData=countData, colData=colData, design= ~ group)
dds <- dds[rowSums(counts(dds)) > 1, ]
dim(dds)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res_pop_PP1_F <- results(dds, contrast = list(c(group_NC.PP1.F),c(group_WA.PP1.F)), listValues=c(1/2,-1/2),alpha=0.05)
res_pop_PP1_F <- results(dds, contrast = list(c(groupNC.PP1.F),c(groupWA.PP1.F)), listValues=c(1/2,-1/2),alpha=0.05)
head(colData)
# set working directory
setwd("~/Documents/UVM_2018/PBIO381/PBIO_381_Notebook")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim("allcountsdataRN_noIT.txt", header=TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_noIT.txt", header=TRUE, stringsAsFactors =  TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
# set working directory
setwd("~/Documents/UVM_2018/PBIO381/PBIO_381_Notebook")
library("DESeq2")
library("ggplot2")
countsTable <- read.delim("allcountsdataRN_noIT.txt", header=TRUE, stringsAsFactors = TRUE, row.names = 1)
countData <- as.matrix(countsTable)
head(countData)
conds <- read.delim("cols_data_noIT.txt", header=TRUE, stringsAsFactors =  TRUE, row.names = 1)
head(conds)
colData <- as.data.frame(conds)
colData$group <- factor(paste0(colData$population, "-", colData$devstage, "-", colData$sex))
head(colData)
dds <- DESeqDataSetFromMatrix(countData=countData, colData=colData, design= ~ group)
dds <- dds[rowSums(counts(dds)) > 1, ]
dim(dds)
dds <- DESeq(dds, parallel=T)
resultsNames(dds)
res_pop_PP1_F <- results(dds, contrast = list(c(group_NC.PP1.F),c(group_WA.PP1.F)), listValues=c(1/2,-1/2),alpha=0.05)
dds <- DESeq(dds, modelMatrixType = "expanded", parallel=T)
resultsNames(dds)
dds <- DESeq(dds, modelMatrixType = "standard", parallel=T)
resultsNames(dds)
res_pop_PP1_F <- results(dds, contrast = list(c(group_NC.PP1.F_vs_NC.AD4.F),c(group_WA.PP1.F_vs_NC.AD4.F)), listValues=c(1/2,-1/2),alpha=0.05)
res_pop_PP1_F <- results(dds, contrast = list(c("group_NC.PP1.F_vs_NC.AD4.F"),c("group_WA.PP1.F_vs_NC.AD4.F")), listValues=c(1/2,-1/2),alpha=0.05)
res_pop_PP1_F <- res_pop_PP1_F[order(res_pop_PP1_F$padj),]
head(res_pop_PP1_F)
summary(res_pop_PP1_F)
sig_pop_PP1_F <- res_pop_PP1_F[which(res_pop_PP1_F$padj < 0.05), ]
dim(sig_pop_PP1_F)
sig_pop_PP1_F
write.csv(sig_pop_PP1_F, file="Gene_list")
sig_pop_PP1_F_df <- as.data.frame(sig_pop_PP1_F)
sig_pop_PP1_F_df$Row.names <- rownames(sig_pop_PP1_F_df)
dim(sig_pop_PP1_F_df)
genesOfInterest_pop_PP1_F <- c(sig_pop_PP1_F_df$Row.names)
length(genesOfInterest_pop_PP1_F)
vsd <- vst(dds, blind=FALSE)
dds$combined = factor(paste0(dds$population, "-", dds$devstage, "-", dds$sex))
dds$combined <- factor(dds$combined, levels=c("WA-L3L-F","WA-L3L-M","WA-PP1-F","WA-PP1-M","WA-PD1-F","WA-PD1-M","WA-AD4-F","WA-AD4-M","NC-L3L-F","NC-L3L-M","NC-PP1-F","NC-PP1-M","NC-PD1-F","NC-PD1-M","NC-AD4-F","NC-AD4-M"), labels=c("WA-L3L-F","WA-L3L-M","WA-PP1-F","WA-PP1-M","WA-PD1-F","WA-PD1-M","WA-AD4-F","WA-AD4-M","NC-L3L-F","NC-L3L-M","NC-PP1-F","NC-PP1-M","NC-PD1-F","NC-PD1-M","NC-AD4-F","NC-AD4-M"))
baseMeanPerGrp <- sapply( levels(dds$combined), function(lvl) rowMeans( counts(dds,normalized=TRUE)[,dds$combined == lvl] ) )
head(baseMeanPerGrp)
dim(baseMeanPerGrp)
m <- baseMeanPerGrp[genesOfInterest_pop_PP1_F, c("WA-PP1-F", "WA-PP1-M", "NC-PP1-F", "NC-PP1-M")]
head(m)
dim(m)
mat_scaled = t(apply(m, 1, scale))
head(mat_scaled)
library(pheatmap)
pheatmap(mat_scaled, labels_col=c("WA-PP1-F", "WA-PP1-M", "NC-PP1-F", "NC-PP1-M"), cluster_cols=FALSE, cluster_rows=TRUE)
pheatmap(mat_scaled, labels_col=c("WA-PP1-F", "WA-PP1-M", "NC-PP1-F", "NC-PP1-M"), cluster_cols=TRUE, cluster_rows=TRUE)
pheatmap(mat_scaled, labels_col=c("WA-PP1-F", "WA-PP1-M", "NC-PP1-F", "NC-PP1-M"), cluster_cols=FALSE, cluster_rows=TRUE)
norm.counts <- counts(dds, normalized=TRUE)
dim(norm.counts)
write.csv(norm.counts, file="beetle_norm_counts.csv", row.names=TRUE, quote=FALSE)
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
library("WGCNA")
pwd
setwd("~/Documents/UVM_2018/PBIO381/PBIO_381_Notebook")
beetData = read.csv("beetle_norm_counts.csv")
dim(beetData)
head(beetData)
names(beetData)
bdatExpr0 = as.data.frame(t(beetData[, -c(1:1)]))
dim(bdatExpr0)
names(bdatExpr0) = beetData$X
rownames(bdatExpr0)=names(beetData)[-c(1:1)]
bgsg = goodSamplesGenes(bdatExpr0, verbose=3)
sampleTree = hclust(dist(bdatExpr0),method="average")
## plot
sizeGrWindow(12,9)
par(cex = 0.6)
par(mar=c(0,4,2,0))
plot(sampleTree,main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab=1.5, cex.axis=1.5, cex.main=2)
pheatmap(mat_scaled, labels_col=c("WA-PP1-F", "WA-PP1-M", "NC-PP1-F", "NC-PP1-M"), cluster_cols=FALSE, cluster_rows=TRUE)
btraitData = read.table("cols_data_noIT_num.txt", header=TRUE)
dim(btraitData)
head(btraitData)
powers = c(c(1:10), seq(from = 12, to = 20, by = 2))
sft  = pickSoftThreshold(bdatExpr0, powerVector = powers, verbose=5)
# plot the results
sizeGrWindow(9,5)
par(mfrow=c(1,2))
cex1 = 0.9
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3]*sft$fitIndices[,2], xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type="n", main=paste("Scale independence")))
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type="n", main=paste("Scale independence")))
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type="n", main=paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels = powers, cex=1, col="red")
abline(h=0.9, col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab="Soft Threshold (power)", ylab="Mean Connectivity", type="n", main = past("Mean Connectivity"))
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab="Soft Threshold (power)", ylab="Mean Connectivity", type="n", main = paste("Mean Connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1, col="red")
# plot the results
sizeGrWindow(9,5)
par(mfrow=c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type="n", main=paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels = powers, cex=1, col="red")
abline(h=0.9, col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab="Soft Threshold (power)", ylab="Mean Connectivity", type="n", main = paste("Mean Connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1, col="red")
net = blockwiseModules(bdatExpr0, power=6, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25, numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs=TRUE, saveTOMFileBase = "beetleTOM", verbose=3)
sizeGrWindow(12,9)
mergedColors = labels2colors(net$colors)
## plot the dendrogram with the module colors underneath
plotDendroAndColors(net$dendrograms[[1]],mergedColors[net$blockGenes[[1]]],"Module colors", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs
geneTree = net$dendrograms[[1]]
nGenes = ncol(bdatExpr0)
nSamples = nrow(bdatExpr0)
MEs0 = moduleEigengenes(bdatExpr0, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, btraitData, use = "p")
moduleTritPvalue = corPvalueStudent(moduleTraitCor, nSamples)
sizeGrWindow(10,6)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(", signif(moduleTritPvalue,1),")", sep="")
dim(textMatrix)
dim(textMatrix) = dim(moduleTraitCor)
par(mar=c(6,8.5,3,3))
labeledHeatmap(Matrix=moduleTraitCor, xLabels=names(btraitData), yLabels=names(MEs), ySymbols = names(MEs), colorLabels = FALSE, colors=greenWhiteRed(50),textMatrix = textMatrix, setStdMargins = FALSE, cex.text = 0.5, zlim=c(-1,1), main=paste("Module-trait relationships"))
# plot the results
sizeGrWindow(9,5)
par(mfrow=c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type="n", main=paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels = powers, cex=1, col="red")
abline(h=0.9, col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab="Soft Threshold (power)", ylab="Mean Connectivity", type="n", main = paste("Mean Connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1, col="red")
net = blockwiseModules(bdatExpr0, power=6, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25, numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs=TRUE, saveTOMFileBase = "beetleTOM", verbose=3)
sft  = pickSoftThreshold(bdatExpr0, powerVector = powers, verbose=5)
# plot the results
sizeGrWindow(9,5)
par(mfrow=c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type="n", main=paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels = powers, cex=1, col="red")
abline(h=0.9, col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab="Soft Threshold (power)", ylab="Mean Connectivity", type="n", main = paste("Mean Connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1, col="red")
net = blockwiseModules(bdatExpr0, power=6, TOMType = "unsigned", minModuleSize = 30, reassignThreshold = 0, mergeCutHeight = 0.25, numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs=TRUE, saveTOMFileBase = "beetleTOM", verbose=3)
sizeGrWindow(12,9)
mergedColors = labels2colors(net$colors)
## plot the dendrogram with the module colors underneath
plotDendroAndColors(net$dendrograms[[1]],mergedColors[net$blockGenes[[1]]],"Module colors", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs
geneTree = net$dendrograms[[1]]
nGenes = ncol(bdatExpr0)
nSamples = nrow(bdatExpr0)
MEs0 = moduleEigengenes(bdatExpr0, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, btraitData, use = "p")
moduleTritPvalue = corPvalueStudent(moduleTraitCor, nSamples)
sizeGrWindow(10,6)
textMatrix = paste(signif(moduleTraitCor, 2), "\n(", signif(moduleTritPvalue,1),")", sep="")
dim(textMatrix) = dim(moduleTraitCor)
par(mar=c(6,8.5,3,3))
labeledHeatmap(Matrix=moduleTraitCor, xLabels=names(btraitData), yLabels=names(MEs), ySymbols = names(MEs), colorLabels = FALSE, colors=greenWhiteRed(50),textMatrix = textMatrix, setStdMargins = FALSE, cex.text = 0.5, zlim=c(-1,1), main=paste("Module-trait relationships"))
