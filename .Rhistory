# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10){
results <- vector()
suppressWarnings(expr)
for(i in c(1:1000)){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10){
results <- vector()
for(i in c(1:1000)){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
suppressWarnings(anosum <- ANOVA(data=mydf))
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10){
results <- vector()
options(warn = -1)
for(i in c(1:1000)){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
options(warn = (len(nsim)*-1))
for(i in nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
options(warn = (length(nsim)*-1))
for(i in nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
options(warn = nsim)
for(i in 1:nsim){
options(warn = -1)
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
options(warn = nsim)
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
options(warn = -1)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
options(warn = nsim)
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
warn(call=F)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
ANOVA <- function(data=as.data.frame(matrix(data=1:12,nrow=4))){
library(reshape2)
myDF2 <- melt(data), warn(call=F)
ANO <- aov(value~variable,data=myDF2)
return(summary(ANO))
}
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
warning(call. = F)
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
# First run both functions
dataCreate <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10){
mydf <- data.frame(GI1=rnorm(mean=mean1,n=n1,sd=sd1), GI2=rnorm(mean=mean2,n=n2,sd=sd2), GI3=rnorm(mean=mean3,n=n3,sd=sd3))
return(mydf)
}
ANOVA <- function(data=as.data.frame(matrix(data=1:12,nrow=4))){
library(reshape2)
myDF2 <- melt(data)
ANO <- aov(value~variable,data=myDF2)
return(summary(ANO))
}
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
warning(call. = F)
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
###################################################
simulation()
# First run both functions
dataCreate <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10){
mydf <- data.frame(GI1=rnorm(mean=mean1,n=n1,sd=sd1), GI2=rnorm(mean=mean2,n=n2,sd=sd2), GI3=rnorm(mean=mean3,n=n3,sd=sd3))
return(mydf)
}
setwd("~/Documents/UVM_2018/BIO381")
options(warn = -1)
ANOVA <- function(data=as.data.frame(matrix(data=1:12,nrow=4))){
library(reshape2)
myDF2 <- melt(data)
ANO <- aov(value~variable,data=myDF2)
return(summary(ANO))
}
simulation(n1=5,n2=5,n3=5,mean1 = 30,mean2 = 40,mean3 = 50)
options(warn = -1)
ANOVA <- function(data=as.data.frame(matrix(data=1:12,nrow=4))){
library(reshape2)
myDF2 <- melt(data)
ANO <- aov(value~variable,data=myDF2)
return(summary(ANO))
}
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=5){
results <- vector()
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
simulation(n1=5,n2=5,n3=5,mean1 = 30,mean2 = 40,mean3 = 50)
# First run both functions
dataCreate <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10){
mydf <- data.frame(GI1=rnorm(mean=mean1,n=n1,sd=sd1), GI2=rnorm(mean=mean2,n=n2,sd=sd2), GI3=rnorm(mean=mean3,n=n3,sd=sd3))
return(mydf)
}
ANOVA <- function(data=as.data.frame(matrix(data=1:12,nrow=4))){
library(reshape2)
myDF2 <- melt(data)
ANO <- aov(value~variable,data=myDF2)
return(summary(ANO))
}
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=5){
suppressMessages()
results <- vector()
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
simulation(n1=5,n2=5,n3=5,mean1 = 30,mean2 = 40,mean3 = 50)
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=5){
results <- vector()
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
suppressMessages(expr = simulation(n1=5,n2=5,n3=5,mean1 = 30,mean2 = 40,mean3 = 50))
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
suppressMessages(expr = simulation(n1=5,n2=5,n3=5,mean1 = 30,mean2 = 40,mean3 = 50))
# First run both functions
dataCreate <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10){
mydf <- data.frame(GI1=rnorm(mean=mean1,n=n1,sd=sd1), GI2=rnorm(mean=mean2,n=n2,sd=sd2), GI3=rnorm(mean=mean3,n=n3,sd=sd3))
return(mydf)
}
ANOVA <- function(data=as.data.frame(matrix(data=1:12,nrow=4))){
library(reshape2)
suppressMessages(expr = myDF2 <- melt(data))
ANO <- aov(value~variable,data=myDF2)
return(summary(ANO))
}
###################################################
# FUNCTION: simulation
# Creates 10 distributions of data, runs and ANOVA on each
# input: parameters for distributions
# output: summary of ANOVAs
simulation <- function(mean1=10,mean2=40,mean3=60,n1=10,n2=10,n3=10,sd1=10,sd2=10,sd3=10,nsim=1000){
results <- vector()
for(i in 1:nsim){
mydf <- dataCreate(mean1=mean1,mean2=mean2,mean3=mean3,n1=n1,n2=n2,n3=n3,sd1=sd1,sd2=sd2,sd3=sd3)
anosum <- ANOVA(data=mydf)
anosumpval <- anosum[[1]][["Pr(>F)"]][1]
results <- c(results, anosumpval)
}
sigpval <- sum(results <= 0.05)
return(sigpval)
}
simulation(n1=5,n2=5,n3=5,mean1 = 30,mean2 = 40,mean3 = 50)
library(ggplot)
library(ggplot2)
###################################################
# FUNCTION: fitlinear
# fits linear regression
# input: numeric vectors of x and y
# output: slope and p value
fitLinear <- function(x=runif(20),y=runif(20)){
myMod <- lm(y~x) # fits model
myOut <- c(slope=summary(myMod)$coefficients[2,1],pVal=summary(myMod)$coefficients[2,4])
plotVar <- qplot(x=x,y=y)
print(plotVar)
return(myOut)
}
fitlinear()
setwd("~/Documents/UVM_2018/FirstProject")
# everything is a function
sum(3,2) # "prefix" function
3 + 2 # also a function
`+`(3,2) # "infix" function
y <- 3
`<-` (yy,3)
print(yy)
print(read.table) # gives function contents
sum # gives function contents
sum(3,2) # function call with inputs
sum() # uses default values
##################################################
# FUNCTION: HardyWeinberg
# calculates Hardy Weinberg allele frequencies
# input: allele prequency p (0,1)
# output: p and frequencies of AA, AB, BB genotypes
# ------------------------------------------------
HardyWeinberg <- function(p=runif(1)){
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
##################################################
HardyWeinberg()
HardyWeinberg(p=0.5)
p
p <- 0.6
HardyWeinberg(p=p)
p
##################################################
# FUNCTION: HardyWeinberg2
# calculates Hardy Weinberg allele frequencies
# input: allele prequency p (0,1)
# output: p and frequencies of AA, AB, BB genotypes
# ------------------------------------------------
HardyWeinberg2 <- function(p=runif(1)){
if(p > 1.0 | p < 0.0) {
return("Function fails, p out of bounds")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
##################################################
HardyWeinberg2(p=4)
HardyWeinberg2(p=0.1)
HardyWeinberg2()
##################################################
HardyWeinberg3(4)
temp <- HardyWeinberg2(p=4)
temp
##################################################
# FUNCTION: HardyWeinberg3
# calculates Hardy Weinberg allele frequencies
# input: allele prequency p (0,1)
# output: p and frequencies of AA, AB, BB genotypes
# ------------------------------------------------
HardyWeinberg3 <- function(p=runif(1)){
if(p > 1.0 | p < 0.0) {
stop("Function fails, p out of bounds")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
temp1 <- HardyWeinberg3(4)
myFunc()
myFunc <- function(a=3,b=4){
z <- a + b
return(z)
}
myFuncBad <- function(a=3){
z <- a + bbb
return(z)
}
myfuncBad()
bbb <- 100
myFuncBad()
###################################################
# FUNCTION: fitlinear
# fits linear regression
# input: numeric vectors of x and y
# output: slope and p value
fitLinear <- function(x=runif(20),y=runif(20)){
myMod <- lm(y~x) # fits model
myOut <- c(slope=summary(myMod)$coefficients[2,1],pVal=summary(myMod)$coefficients[2,4])
plotVar <- qplot(x=x,y=y)
print(plotVar)
return(myOut)
}
##################################################
fitLinear()
library(ggplot2)
fitlinear()
z <- c(runif(99),NA)
mean(z)
mean(x=z,na.rm=TRUE)
mean(x=z,na.rm=TRUE,trim=0.05)
do.call(mean,l)
l <- list(x=z,na.rm=TURE,trim=0.05)
do.call(mean,l)
l <- list(x=z,na.rm=TRUE,trim=0.05)
do.call(mean,l)
source('~/Documents/UVM_2018/FirstProject/Structured Programming.R', echo=TRUE)
# Preliminaries
library(ggplot2)
# Program body follows here
GetData()
CalculateStuff()
SummarizeOutput()
GraphResults()
# demonstrate sourcing of a file
# March 8 2018
# EAT
source("MyFunctions.R")
# demonstrate sourcing of a file
# March 8 2018
# EAT
source("MyFunctions.R")
GetStuff()
CalculateStuff()
GetData()
CalculateStuff()
SummarizeOutput()
GraphResults()
CalculateStuff()
source('~/Documents/UVM_2018/FirstProject/Structured Programming.R', echo=TRUE)
SummarizeOutput()
source('~/Documents/UVM_2018/FirstProject/Structured Programming.R', echo=TRUE)
GraphResults()
source('~/Documents/UVM_2018/FirstProject/Structured Programming.R', echo=TRUE)
setwd("~/Documents/UVM_2018/PBIO381/PBIO_381_Notebook")
install.packages(c("Cairo","ggplot2","gridExtra","gtable","tidyr","devtools"),dependencies=T)
install.packages(c("Cairo", "ggplot2", "gridExtra", "gtable", "tidyr", "devtools"), dependencies = T)
install.packages(c("Cairo","ggplot2","gridExtra","gtable","tidyr","devtools"),dependencies=T)
install.packages(c("Cairo", "ggplot2", "gridExtra", "gtable", "tidyr", "devtools"), dependencies = T)
devtools::install_github('royfrancis/pophelper')
library(pophelper)
library(ggplot2)
setwd("~/Documents/UVM_2018/PBIO381/PBIO_381_Notebook")
install.packages(c("Cairo","ggplot2","gridExtra","gtable","tidyr","devtools"),dependencies=T)
install.packages(c("Cairo", "ggplot2", "gridExtra", "gtable", "tidyr", "devtools"), dependencies = T)
devtools::install_github('royfrancis/pophelper')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
version
install.packages("ggplot2")
library(ggplot2)
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(pophelper)
